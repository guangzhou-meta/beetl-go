package core

import (
	"reflect"
)

import (
	"github.com/guangzhou-meta/beetl-go/common"
)

type PageQueryIgnoreTag struct {
	*Tag
}

func NewPageQueryIgnoreTag() *PageQueryIgnoreTag {
	return &PageQueryIgnoreTag{
		Tag: NewTag(),
	}
}

func (f *PageQueryIgnoreTag) Render() {
	o := f.ctx.GetGlobal(common.DBAutoGeneratedSqlPAGE)
	if o != nil {
		f.bw.WriteString(" ")
	} else {
		f.DoBodyRender()
	}
}

func (f *PageQueryIgnoreTag) ClassName() string {
	return "org.beetl.sql.core.engine.PageQueryIgnoreTag"
}

func (f *PageQueryIgnoreTag) GetClassType() reflect.Type {
	return f.Tag.GetType(f)
}

type PageQueryTag struct {
	*Tag
}

func NewPageQueryTag() *PageQueryTag {
	return &PageQueryTag{
		Tag: NewTag(),
	}
}

func (f *PageQueryTag) Render() {
	o := f.ctx.GetGlobal(common.DBAutoGeneratedSqlPAGE)
	if o != nil {
		f.bw.WriteString("count(1)")
	} else {
		f.DoBodyRender()
	}
}

func (f *PageQueryTag) ClassName() string {
	return "org.beetl.sql.core.engine.PageQueryTag"
}

func (f *PageQueryTag) GetClassType() reflect.Type {
	return f.Tag.GetType(f)
}
