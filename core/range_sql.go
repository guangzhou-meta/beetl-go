package core

import (
	"github.com/guangzhou-meta/beetl-go/common"
	"github.com/guangzhou-meta/beetl-go/util"
)

import (
	estrings "github.com/guangzhou-meta/go-lib/strings"
)

type RangeSql interface {
	ToRange(jdbcSql string, offset int, limit int) string
	ToTemplateRange(mapping interface{}, template string) string
	AddTemplateRangeParas(paras map[string]interface{}, offset int, size int)
}

type OffsetLimitRange struct {
	sqlStyle AbstractDBStyleI
}

func NewOffsetLimitRange(style AbstractDBStyleI) *OffsetLimitRange {
	return &OffsetLimitRange{
		sqlStyle: style,
	}
}

func (rs *OffsetLimitRange) ToRange(jdbcSql string, offset int, limit int) string {
	offset = mysqlOffset(rs.sqlStyle.GetOffsetStartZero(), offset)
	sb := estrings.NewStringBuilder()
	sb.Append(" limit ").
		Append(offset).
		Append(" , ").
		Append(limit)
	str := sb.String()
	return str
}

func (rs *OffsetLimitRange) ToTemplateRange(mapping interface{}, template string) string {
	sqlStyle := rs.sqlStyle
	str := estrings.NewStringBuilder().
		Append(template).
		Append(sqlStyle.GetOrderBy()).
		Append(" limit ").
		Append(sqlStyle.AppendExpress(common.DBAutoGeneratedSqlOFFSET)).
		Append(" , ").
		Append(sqlStyle.AppendExpress(common.DBAutoGeneratedSqlPageSize))
	return str.String()
}

func (rs *OffsetLimitRange) AddTemplateRangeParas(paras map[string]interface{}, offset int, size int) {
	if !rs.sqlStyle.GetOffsetStartZero() {
		offset -= 1
	}
	paras[common.DBAutoGeneratedSqlOFFSET] = offset
	paras[common.DBAutoGeneratedSqlPageSize] = size
}

type AbstractDBStyleI interface {
	GetOffsetStartZero() bool
	GetOrderBy() string
	AppendExpress(str string) string
}

type AbstractDBStyle struct {
	offsetStartZero bool
	lineSeparator   string
	cf              *Configuration
}

func NewAbstractDBStyle(cf *Configuration) *AbstractDBStyle {
	return &AbstractDBStyle{
		lineSeparator: util.GetLineSeparator(),
		cf:            cf,
	}
}

func (db *AbstractDBStyle) GetOffsetStartZero() bool {
	return db.offsetStartZero
}

func (db *AbstractDBStyle) GetOrderBy() string {
	return db.lineSeparator + db.AppendExpress("text(has(_orderBy)?' order by '+_orderBy)") + " "
}

func (db *AbstractDBStyle) AppendExpress(str string) string {
	return db.cf.placeholderStart + str + db.cf.placeholderEnd
}

// mysqlOffset mysql, postgres, sqlite, sqlServer2012
func mysqlOffset(offsetStartZero bool, start int) int {
	if offsetStartZero {
		return start
	}
	return start - 1
}

// oracleOffset oracle, db2sql, sqlServer
func oracleOffset(offsetStartZero bool, start int) int {
	if offsetStartZero {
		return start + 1
	}
	return start
}

func oraclePageEnd(offset int, pageSize int) int {
	return offset + pageSize
}

// db2sqlPageEnd db2sql, sqlServer
func db2sqlPageEnd(offset int, pageSize int) int {
	return offset + pageSize - 1
}
